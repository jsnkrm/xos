alias physicalSP S0;
alias sysCallNo S1;
alias filename S2;

alias i S3;

alias basicBlock S4;

alias flagDFL S5;

alias flagFAT S6;

alias FileExistFlag S7;

alias FATindex S8;

alias j S9; 

alias dataBLOCK S10;

physicalSP = ([PTBR + 2*(SP / 512)]) * 512 + (SP % 512);

sysCallNo = [physicalSP - 1];

filename = [physicalSP - 3];

if( sysCallNo == 1 ) then // CREATE ------------------------------------------------------------------------------


		

		i=0;
		while(i < 512) do  // checking the FAT entry for a file with given filename
		
			if([FAT + i] == filename) then

				[physicalSP - 2] = 0;   // success if file with given filename is found!!!
				ireturn;
			
			endif;	
			
			i = i + 8;

		endwhile;

		

		flagDFL = 1;

		i=0;
		while(i < 7*512) do    // checking in Disk Free List for a free space
		
			if([DISK_LIST + i] == 0) then  
				
				basicBlock = i;   // if found assign it as basic block of new file to be created and unset flag 
				flagDFL = 0;
				break;
			
			endif;

			i = i + 1;
		
		endwhile;

		

		if(flagDFL == 1) then         // if flag is set => no free space so return failure -1
			
			[physicalSP - 2] = -1;
			ireturn;
		
		endif;
			
		
			
		flagFAT = 1;

		i=0;
		while(i < 512) do  // find free entry in FAT by checking for entry with basic block value = -1
		
			if([FAT + i + 2] == -1) then
			
				flagFAT = 0;
				[FAT + i] = filename;
				[FAT + i + 1] = 0;
				[FAT + i + 2] = basicBlock;
				break;

			endif;	
			
			i = i + 8;
		
		endwhile;

		

		if(flagFAT == 1) then
			
			[physicalSP - 2] = -1;
			ireturn;
		
		endif;
		
	load(1,basicBlock);	 // load the new file created to scratchpad

	i=0;
	while(i < 256) do

		[512 + i] = -1;

		i = i + 1;

	endwhile;	

	

	store(1,basicBlock);	 // store the modified new file from scratchpad back to its assigned basic block

	[DISK_LIST+ basicBlock] = 1;

	store(5,19);  // FAT stored back to disk

	store(6,20);  //  Disk Free List stored back to disk 

	[ physicalSP - 2 ] = 0;  

	
	//breakpoint;
	ireturn;
	
endif;

if( sysCallNo == 4 ) then  // DELETE ---------------------------------------------------------------------

		FileExistFlag = 1;
		
		//breakpoint;

		i=0;
		while(i < 64) do  // checking the FAT entry for a file with given filename
		
			if([FAT + i*8] == filename) then

				FATindex = i;
				FileExistFlag = 0;
				break;

			endif;	
			
			i = i + 1;

		endwhile;

		//breakpoint;

		if (FileExistFlag == 1) then

			[ physicalSP - 2 ] = -1;
			print ("DelNoName");
			ireturn;

		endif;

		//breakpoint;

		i = 0;
		while ( i < 64 ) do

			if( [FILE_TABLE + i*2] == FATindex ) then

				[physicalSP - 2] = -1;
				print("DelFilOp");
				ireturn;

			endif;	

			i = i + 1;

		endwhile;

		//breakpoint;

		basicBlock = [ FAT + FATindex*8 + 2];
		
		if(basicBlock<24 || basicBlock > 448) then   /// Invalid BASIC BLOCK

				[physicalSP - 2] = -1;
				print("DelInvBB");
				ireturn;
		endif;		

		
		i = 0;
		j = 0;

		//breakpoint;
		while ( [SCRATCHPAD + i] != -1 && i < 256) do


			//breakpoint;	
			
			load ( 1,basicBlock );
			dataBLOCK = [ SCRATCHPAD + i ];
			
			if(dataBLOCK < 448 && dataBLOCK >24) then
			
				load ( 1 , dataBLOCK);
				while( j < 512) do

					[SCRATCHPAD + j] = "";
					j = j + 1;
					print(j);
				endwhile;	
				[ DISK_LIST + dataBLOCK ] = 0;
				store( 1, dataBLOCK );					

			endif;	
			j = 0;
			i = i + 1;

		endwhile;

		//breakpoint;

		load ( 1, basicBlock);
		j = 0;
		while( j < 256) do

			[ SCRATCHPAD + j ] = "";

			j = j + 1;
		
		endwhile;	 

		store( 1 , basicBlock );

		[DISK_LIST + basicBlock] = 0;

		[FAT + FATindex*8] = -1;
		[FAT + FATindex*8 + 1] = 0;
		[FAT + FATindex*8 + 2] = -1;		 

		store (5,19); // FAT stored back
		store (6,20);  // Disk Free List stored back

		[ physicalSP - 2 ] = 0;

		//breakpoint;
		ireturn; 

endif;
